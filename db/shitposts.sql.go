// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: shitposts.sql

package db

import (
	"context"
	"time"
)

const createShitpost = `-- name: CreateShitpost :one

INSERT INTO shitposts (author, content, passcode) VALUES (?, ?, ?) RETURNING id, title, author, content, passcode, created_at, updated_at
`

type CreateShitpostParams struct {
	Author   string
	Content  string
	Passcode string
}

func (q *Queries) CreateShitpost(ctx context.Context, arg CreateShitpostParams) (Shitpost, error) {
	row := q.db.QueryRowContext(ctx, createShitpost, arg.Author, arg.Content, arg.Passcode)
	var i Shitpost
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Content,
		&i.Passcode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteShitpostById = `-- name: DeleteShitpostById :one

DELETE FROM shitposts WHERE id = ? and passcode = ? RETURNING id, title, author, content, passcode, created_at, updated_at
`

type DeleteShitpostByIdParams struct {
	ID       int64
	Passcode string
}

func (q *Queries) DeleteShitpostById(ctx context.Context, arg DeleteShitpostByIdParams) (Shitpost, error) {
	row := q.db.QueryRowContext(ctx, deleteShitpostById, arg.ID, arg.Passcode)
	var i Shitpost
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Content,
		&i.Passcode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShitpostById = `-- name: GetShitpostById :one

SELECT id, author, content, created_at, updated_at FROM shitposts WHERE id = ?
`

type GetShitpostByIdRow struct {
	ID        int64
	Author    string
	Content   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetShitpostById(ctx context.Context, id int64) (GetShitpostByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getShitpostById, id)
	var i GetShitpostByIdRow
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listShitposts = `-- name: ListShitposts :many

SELECT id, author, content, created_at, updated_at FROM shitposts
`

type ListShitpostsRow struct {
	ID        int64
	Author    string
	Content   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) ListShitposts(ctx context.Context) ([]ListShitpostsRow, error) {
	rows, err := q.db.QueryContext(ctx, listShitposts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListShitpostsRow
	for rows.Next() {
		var i ListShitpostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
